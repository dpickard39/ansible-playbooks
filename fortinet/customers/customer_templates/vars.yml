---
############################################################
## This is the variables file used by all of the scripts. ##
## This files should be named vars.yml.                   ##
############################################################

# Required Variables
vdom: "root"
ansible_httpapi_use_ssl: yes
ansible_httpapi_validate_certs: no
ansible_httpapi_port: 10443 # Default port is 443
script_path: '/tmp/fgt.shell.task'

## Domain Information ##
ad_domain: "mydomain.com"
public_domain: "mydomain.com"

## VPN Authentication Options
sslvpn_auth_type: "saml" # Options "ldap" | "saml"
# Set configure_ldap to yes if you want to configure LDAP in addition to SAML for other services.
configure_ldap: "yes"

# Remote Access VPN Variables
vpn_domain: "remote.{{ public_domain }}"
sslvpn_client_start_ip: "10.255.255.1"
sslvpn_client_end_ip: "10.255.255.254"
sslvpn_dns_server1: "x.x.x.x"
sslvpn_dns_server2: "x.x.x.x"

##################################################
## Set the ssl_certificate type.                ##
## Options are: acme | public | factory         ##
##################################################

ssl_certificate:  "factory"

###################################################################################################################
##                                              Public Certificate                                               ##                 
##                                                                                                               ##
## If you are using a purchased certificate you will need to use the private_key and the cert_content variables. ##
## If you have a *.pfx file you will need to use OpenSSL to seperate the certificate and key.                    ##
## To extract the certificate and key you can use the following commands:                                        ##
##   openssl pkcs12 -in filename.pfx -clcerts -nokeys -out certificate.pem                                       ##
##   openssl pkcs12 -in filename.pfx -nocerts -out private_key.pem                                               ##
##   *** I like to name my certificate as the domain name ie. vpn.mydomain.com  ***                              ##
## These files must be in Base64 format.                                                                         ##
###################################################################################################################

private_key: "{{ lookup( 'file', certificates/private_key.pem') | b64encode }}"
cert_content: "{{ lookup( 'file', certificates/certificate.pem') | b64encode }}"

# LDAP Configuration Variables
ldap_dn: "DC=mydomain,DC=com"
ldap_server_ip: "x.x.x.x"
ldap_user: "ldapservice@{{ ad_domain }}"
ldap_pass: "***********"
ldap_users_group: "VPN_Users"
ldap_secure: "ldaps" # Options are "none" | "ldaps" | "starttls"
ldap_port: "636" # Use "636" with ldaps or starttls otherwise use "389"

# Azure SAML Configuration Variables
azure_tenant_id: "your_azure_tenant_id"
azure_remote_cert: "{{ lookup( 'file', 'certificates/azure_idp_cert.cer') | b64encode}}"

## This is the certificate that you uploaded to the Azure App Registration > SSO Settings
# Default is "Fortinet_Factory", note that this certificate is not unique from every other Fortigate
# It is recommended to use your own certificate, this can be the ACME certificate.
azure_local_certname: "Fortinet_Factory"

## ************ THIS IS REQUIRED FOR AZURE SAML ************
## You can use the azure_cert.yaml playbook or you can upload the Azure Certificate manually through the GUI.
## You will have to have the name of the remote certificate that is auto assigned by the Fortigate.
## You can find the name of the certificate in System > Certifiactes under Remote Certicate
## The certificate will be issues by "Microsoft Azure Federated SSO Certificate"
azure_remote_certname: "REMOTE_Cert_#"
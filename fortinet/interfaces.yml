- hosts: fortigates
  collections:
    - fortinet.fortios
  connection: httpapi
  gather_facts: no
  vars_files:
    - "customers/{{ customer }}/vars.yml"
    - "customers/{{ customer }}/interfaces.yml"
  vars:
  tasks:
    - name: Creating Fortilink VLAN interfaces with DHCP Server Scope
      fortios_system_interface:
        vdom: "{{ vdom }}"
        state: present
        access_token: "{{ fortios_access_token }}"
        system_interface:
          vdom: "{{ vdom }}"
          name: "fortilink"
          auto_auth_extension_device: enable

    - name: Creating Fortilink VLAN interfaces with DHCP Server Scope
      fortios_system_interface:
        vdom: "{{ vdom }}"
        state: present
        access_token: "{{ fortios_access_token }}"
        system_interface:
          vdom: "{{ vdom }}"
          name: "{{ item.name }}"
          ip: "{{ item.ipaddress }}"
          allowaccess: "{{ item.allow_access }}"
          device_identification: "enable"
          role: "lan"
          interface: "{{ item.parent_interface }}"
          vlanid: "{{ item.vlan_id }}"
          auto_auth_extension_device: "{{ item.auto_auth_device }}"
          type: "vlan"
      with_list: "{{ interfaces }}"
      when: 
        - item.dhcp_type is defined
        - item.dhcp_type == "scope"

    - name: Creating Fortilink VLAN interfaces with DHCP Server Relay
      fortios_system_interface:
        vdom: "{{ vdom }}"
        state: present
        access_token: "{{ fortios_access_token }}"
        system_interface:
          vdom: "{{ vdom }}"
          name: "{{ item.name }}"
          ip: "{{ item.ipaddress }}"
          allowaccess: "{{ item.allow_access }}"
          dhcp_relay_service: "enable"
          dhcp_relay_ip: "{{ item.relay_ip }}"
          device_identification: "enable"
          role: "lan"
          interface: "{{ item.parent_interface }}"
          vlanid: "{{ item.vlan_id }}"
          auto_auth_extension_device: "{{ item.auto_auth_device }}"
      with_list: "{{ interfaces }}"
      when: 
        - item.dhcp_type is defined
        - item.dhcp_type == "relay"

    - name: Creating DHCP Servers for Fortilink VLAN interfaces 
      fortios_system_dhcp_server:
        vdom: "{{ vdom }}"
        state: present
        access_token: "{{ fortios_access_token }}"
        system_dhcp_server:
          id: "{{ item.vlan_id }}"
          domain: "{{ item.domain }}"
          default_gateway: "{{ item.ipaddress }}"
          netmask: "255.255.255.0"
          interface: "{{ item.name }}"
          ip_range:
          -
            id: "{{ item.vlan_id }}"
            start_ip: "{{ item.start_ip }}"
            end_ip: "{{ item.end_ip }}"
          lease_time: "{{ item.lease_time }}"
          dns_server1: "{{ item.dns_server1 }}"
          dns_server2: "{{ item.dns_server2 }}"
          server_type: "regular"
          status: enable
      with_list:  "{{ interfaces }}"
      when: 
        - item.dhcp_type is defined
        - item.dhcp_type == "scope"


    - name: Creating the trusted zone.
      fortios_system_zone:
        vdom: "{{ vdom }}"
        state: present
        access_token: "{{ fortios_access_token }}"
        system_zone:
          description: "Inter-VLAN routing is allowed."
          intrazone: "allow"
          name: "trusted"
    
    - name: Creating the untrusted zone.
      fortios_system_zone:
        vdom: "{{ vdom }}"
        state: present
        access_token: "{{ fortios_access_token }}"
        system_zone:
          description: "Inter-VLAN routing is denied."
          intrazone: "deny"
          name: "untrusted"

    - name: Preparing script to append interfaces to the trusted zone.
      raw: |
            cat > {{script_path }} << EOF_OUTER
            # /bin/bash
            # Please make sure tool sshpass is installed. e.g. on Debian/Ubuntu, apt-get install sshpass.
            # Optionally you can pass some parameters.
            # The character `a` at second line below is to avoid post-login-banner barrier.
            sshpass -p '{{ fgt_pass }}' ssh -o StrictHostKeyChecking=no {{ fgt_user }}@{{ ansible_host }} <<EOF
            a
            # ====================== Edit Your Commands Below =============================================
            config system zone
            edit 'trusted'
            append interface '\$1'
            next
            end
            # ==============================================================================================
            EOF
            EOF_OUTER


    - name: Appending interfaces to the trusted zone.
      raw: |
            chmod +x {{ script_path }} && {{ script_path }} '{{ item.name }}'
      args:
        executable: /bin/bash
      with_list:  "{{ interfaces }}"
      when: 
        - item.zone == "trusted"

    - name: Preparing script to append interfaces to the untrusted zone.
      raw: |
            cat > {{script_path }} << EOF_OUTER
            # /bin/bash
            # Please make sure tool sshpass is installed. e.g. on Debian/Ubuntu, apt-get install sshpass.
            # Optionally you can pass some parameters.
            # The character `a` at second line below is to avoid post-login-banner barrier.
            sshpass -p '{{ fgt_pass }}' ssh -o StrictHostKeyChecking=no {{ fgt_user }}@{{ ansible_host }} <<EOF
            a
            # ====================== Edit Your Commands Below =============================================
            config system zone
            edit 'untrusted'
            append interface '\$1'
            next
            end
            # ==============================================================================================
            EOF
            EOF_OUTER


    - name: Appending interfaces to the untrusted zone.
      raw: |
            chmod +x {{ script_path }} && {{ script_path }} '{{ item.name }}'
      args:
        executable: /bin/bash
      with_list:  "{{ interfaces }}"
      when: 
        - item.zone == "untrusted"
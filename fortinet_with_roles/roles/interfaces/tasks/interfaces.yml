---
- name: Connfigure the default switch (internal)
  fortios_system_interface:
    vdom: "{{ vdom }}"
    state: present
    system_interface:
      vdom: "{{ vdom }}"
      name: "{{ item.name }}"
      ip: "{{ item.ipaddress }}"
      allowaccess: "{{ item.allow_access }}"
      device_identification: "enable"
      role: "lan"
      auto_auth_extension_device: "{{ item.auto_auth_device }}"
      type: "hard-switch"
  with_list: "{{ interfaces }}"
  when: 
    - item.type is defined
    - item.type == "internal"

- name: Configure Physical Interfaces
  fortios_system_interface:
    vdom: "{{ vdom }}"
    state: present
    system_interface:
      vdom: "{{ vdom }}"
      name: "{{ item.name }}"
      ip: "{{ item.ipaddress }}"
      allowaccess: "{{ item.allow_access }}"
      device_identification: "enable"
      role: "lan"
      auto_auth_extension_device: "{{ item.auto_auth_device }}"
      type: "physical"
  with_list: "{{ interfaces }}"
  when: 
    - item.type is defined
    - item.type == "physical"

- name: Create VLAN interfaces
  fortios_system_interface:
    vdom: "{{ vdom }}"
    state: present
    system_interface:
      vdom: "{{ vdom }}"
      name: "{{ item.name }}"
      ip: "{{ item.ipaddress }}"
      allowaccess: "{{ item.allow_access }}"
      device_identification: "enable"
      role: "lan"
      interface: "{{ item.parent_interface }}"
      vlanid: "{{ item.vlan_id }}"
      auto_auth_extension_device: "{{ item.auto_auth_device }}"
      type: "vlan"
  with_list: "{{ interfaces }}"
  when: 
    - item.type is defined
    - item.type == "vlan"

# - name: Create VLAN interfaces with DHCP Relay
#   fortios_system_interface:
#     vdom: "{{ vdom }}"
#     state: present
#     system_interface:
#       vdom: "{{ vdom }}"
#       name: "{{ item.name }}"
#       ip: "{{ item.ipaddress }}"
#       allowaccess: "{{ item.allow_access }}"
#       dhcp_relay_service: "enable"
#       dhcp_relay_ip: "{{ item.relay_ip }}"
#       device_identification: "enable"
#       role: "lan"
#       interface: "{{ item.parent_interface }}"
#       vlanid: "{{ item.vlan_id }}"
#       auto_auth_extension_device: "{{ item.auto_auth_device }}"
#   with_list: "{{ interfaces }}"
#   when: 
#     - item.dhcp_type is defined
#     - item.dhcp_type == "relay"
#     - item.type is defined
#     - item.type == "vlan"

- name: Preparing script to append interfaces to the trusted zone.
  raw: |
        cat > {{script_path }} << EOF_OUTER
        # /bin/bash
        # Please make sure tool sshpass is installed. e.g. on Debian/Ubuntu, apt-get install sshpass.
        # Optionally you can pass some parameters.
        # The character `a` at second line below is to avoid post-login-banner barrier.
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} <<EOF
        a
        # ====================== Edit Your Commands Below =============================================
        config system zone
        edit 'trusted'
        append interface '\$1'
        next
        end
        # ==============================================================================================
        EOF
        EOF_OUTER

- name: Appending interfaces to the trusted zone.
  raw: |
        chmod +x {{ script_path }} && {{ script_path }} '{{ item.name }}'
  args:
    executable: /bin/bash
  with_list:  "{{ interfaces }}"
  when:
    - item.zone is defined
    - item.zone == "trusted"

- name: Preparing script to append interfaces to the untrusted zone.
  raw: |
        cat > {{script_path }} << EOF_OUTER
        # /bin/bash
        # Please make sure tool sshpass is installed. e.g. on Debian/Ubuntu, apt-get install sshpass.
        # Optionally you can pass some parameters.
        # The character `a` at second line below is to avoid post-login-banner barrier.
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} <<EOF
        a
        # ====================== Edit Your Commands Below =============================================
        config system zone
        edit 'untrusted'
        append interface '\$1'
        next
        end
        # ==============================================================================================
        EOF
        EOF_OUTER


- name: Appending interfaces to the untrusted zone.
  raw: |
        chmod +x {{ script_path }} && {{ script_path }} '{{ item.name }}'
  args:
    executable: /bin/bash
  with_list:  "{{ interfaces }}"
  when: 
    - item.zone is defined
    - item.zone == "untrusted"